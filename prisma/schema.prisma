// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  otp            String?
  otpExpiration  DateTime
  long           Float?
  lat            Float?
  city           String?
  country        String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts Account[]
  moments  Moment[]
  pets     Pets[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pets {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  imageSrc     String
  name         String
  badBehavior  String
  goodBehavior String
  vaccinations String[]
  gender       String
  weight       String
  age          String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Moment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  imageSrc  String
  createdAt DateTime  @default(now())
  userId    String    @db.ObjectId
  startDate DateTime
  endDate   DateTime
  likes     String[]
  comments  Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  momentId  String   @db.ObjectId
  createdAt DateTime @default(now())

  moments Moment @relation(fields: [userId], references: [id], onDelete: Cascade)
}

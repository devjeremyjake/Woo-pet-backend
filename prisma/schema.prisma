// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  imageUrl       String?
  imageKey       String?
  hashedPassword String?
  otp            String?
  otpExpiration  DateTime?
  long           Float?
  lat            Float?
  city           String?
  country        String?
  isVerified     Boolean   @default(false)
  isSeller       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  favoriteIds    String[]  @db.ObjectId

  accounts Account[]
  moments  Moment[]
  pets     Pets[]
  services Service[]
  orders   Order[]
  reviews  Review[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Pets {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  imageUrl     String
  imageKey     String
  name         String
  badBehavior  String
  goodBehavior String
  vaccinations String[]
  gender       String
  weight       String
  age          String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Moment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  imageKey  String
  createdAt DateTime  @default(now())
  userId    String    @db.ObjectId
  likes     String[]
  comments  Comment[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  userId    String   @db.ObjectId
  momentId  String   @db.ObjectId
  createdAt DateTime @default(now())

  moments Moment @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Service {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  price       Float
  experience  String
  description String
  location    Json
  fileUrl     String?
  fileKey     String?
  userId      String   @db.ObjectId
  categoryId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  reviews     Review[]
  provider    User     @relation(fields: [userId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]
}

model Order {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  walkDate     DateTime
  walkDuration Int
  walkTime     String
  userId       String   @db.ObjectId
  serviceId    String   @db.ObjectId
  review       Review?
  service      Service  @relation(fields: [serviceId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  payment      Payment?
  status       String // Define order status (e.g., "pending", "completed", etc.)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  serviceId String   @db.ObjectId
  orderId   String   @unique @db.ObjectId

  user    User    @relation(fields: [userId], references: [id])
  order   Order?  @relation(fields: [orderId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
}

model Payment {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  amount       Float
  reference    String   @unique
  lastCardFour String
  orderId      String   @unique @db.ObjectId
  status       String
  order        Order?   @relation(fields: [orderId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
